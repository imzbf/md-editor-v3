import{h as m,as as a,q as l,v as c,K as p,at as u,D as f,au as h,S as g,av as v,c as x,a as b,b as o,o as k}from"./Bhvsa0_W.js";import{p as r}from"./8hPXuzjv.js";import{_ as y}from"./O8bl5rUi.js";import{_ as E}from"./DtCETCnE.js";import{r as i}from"./fSL3XPsi.js";import{u as w}from"./msWAgwBY.js";import"./Cq9F0Kts.js";import"./DJGgYcMU.js";import"./D9OiiXAI.js";const s=`## üòÅ Basic Usage

It has been developing iteratively, so update the latest version please. Publish logs: [releases](https://github.com/imzbf/md-editor-v3/releases)

### ü§ñ Npm Install

\`\`\`shell [install:npm]
npm install md-editor-v3
\`\`\`

\`\`\`shell [install:yarn]
yarn add md-editor-v3
\`\`\`

!!! warning

~~When using server-side rendering, make sure to set \`editorId\` to a constant value.~~
Starting from version 5.0, there is no such limitation.

!!!

### ü§ì CDN

Use production version in html directly:

\`\`\`html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Global Load</title>
    <link
      href="https://unpkg.com/md-editor-v3@\${EDITOR_VERSION}/lib/style.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="md-editor-v3">
      <md-editor-v3 v-model="text" />
    </div>
    <script src="https://unpkg.com/vue@3.5.12/dist/vue.global.prod.js"><\/script>
    <script src="https://unpkg.com/md-editor-v3@\${EDITOR_VERSION}/lib/umd/index.js"><\/script>
    <script>
      const App = {
        data() {
          return {
            text: 'Hello Editor!!',
          };
        },
      };
      Vue.createApp(App).use(MdEditorV3.MdEditor).mount('#md-editor-v3');
    <\/script>
  </body>
</html>
\`\`\`

#### ü•± Setup Template

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('Hello Editor!');
<\/script>
\`\`\`

#### ü§ó Jsx Template

\`\`\`jsx
import { defineComponent, ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

export default defineComponent({
  name: 'MdEditor',
  setup() {
    const text = ref('');
    const onChange = (v) => (text.value = v);

    return () => <MdEditor modelValue={text.value} onChange={onChange} />;
  },
});
\`\`\`

#### üìñ Preview Only

\`\`\`vue
<template>
  <MdPreview :id="id" :modelValue="text" />
  <MdCatalog :editorId="id" :scrollElement="scrollElement" />
</template>

<script setup>
import { ref } from 'vue';
import { MdPreview, MdCatalog } from 'md-editor-v3';
import 'md-editor-v3/lib/preview.css';

const id = 'preview-only';
const text = ref('# Hello Editor');
const scrollElement = document.documentElement;
<\/script>
\`\`\`

!!! warning

When using server-side rendering, \`scrollElement\` should be of string type, eg: \`html\`, \`body\`, \`#id\`, \`.class\`.

!!!

## üéõ Used in Web Component

Complete example reference [the sample project](https://github.com/imzbf/md-editor-v3/tree/main/example/webComponent) provided in the source code.

Here are the precautions:

1. The image zoom-in view feature is ineffective; implementation needs to be done manually!!!
2. Do not use CDN to reference dependency libraries by default; refer to [[Import All Library]](https://imzbf.github.io/md-editor-v3/en-US/demo#%F0%9F%99%8D%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F%20Import%20All%20Library)!!!

## ü•Ç Api Usage

Usages of some APIs.

### ü•∂ Customize Shortcut Key

- Source code for built-in shortcut key configuration: [commands.ts](https://github.com/imzbf/md-editor-v3/blob/develop/MdEditor/layouts/Content/codemirror/commands.ts). They have been added as extensions to \`codemirror\`.

- The basic principle of replacing or deleting shortcut keys is to find the corresponding extension, and handle it.

- In fact, The Second input parameter \`extensions\` of \`codeMirrorExtensions\` is an array, The first item in the array is the shortcut key extension. The third input parameter is the default shortcut key configuration.

#### üíÖ Modify Shortcut Key

Change \`Ctrl-b\` to \`Ctrl-m\`

\`\`\`js
import { config } from 'md-editor-v3';
import { keymap } from '@codemirror/view';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions, mdEditorCommands) {
    const newExtensions = [...extensions];
    // 1. Remove the default shortcut key extension first
    newExtensions.shift();

    // 2. Reference the source code for shortcut key configuration
    // Find the location of the configuration item for CtrlB in mdEditorCommands
    const CtrlB = mdEditorCommands[0];

    // 3. Document for configuring shortcut keys of codemirror
    // https://codemirror.net/docs/ref/#commands
    const CtrlM = {
      // We need the run method in CtrlB here
      ...CtrlB,
      key: 'Ctrl-m',
      mac: 'Cmd-m',
    };

    // 4. Add the modified shortcut key to the array
    const newMdEditorCommands = [
      CtrlM,
      ...mdEditorCommands.filter((i) => i.key !== 'Ctrl-b'),
    ];

    newExtensions.push(keymap.of(newMdEditorCommands));

    return newExtensions;
  },
});
\`\`\`

#### ‚úÇÔ∏è Delete Shortcut Key

Disable all shortcut keys

\`\`\`js
import { config } from 'md-editor-v3';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions) {
    const newExtensions = [...extensions];
    // 1. Remove default shortcut key extensions
    newExtensions.shift();

    // 2. Return extension list
    return newExtensions;
  },
});
\`\`\`

#### üíâ Add Shortcut Key

If you want to insert content into the edit box, you need to use the \`insert\` method bound on the instance of editor, reference: [Insert content into the edit box](/md-editor-v3/ed-US/docs#%F0%9F%92%89%20insert).

If you are not using \`config\` in the component where the editor is located, you are unable to obtain instance of editor at this time. You may need to use \`EventBus\`.

Add shortcut key \`Ctrl+m\`, to insert a marking module into the editing box(\`==mark==\`)

\`index.ts\`

\`\`\`js
import { config } from 'md-editor-v3';
import { keymap, KeyBinding } from '@codemirror/view';
// If you used EventBus
import bus from '@/utils/event-bus';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions, mdEditorCommands) {
    const newExtensions = [...extensions];
    // 1. Remove the default shortcut key extension first
    newExtensions.shift();

    // 2. Create a new shortcut key configuration, reference: https://codemirror.net/docs/ref/#commands
    const CtrlM: KeyBinding = {
      key: 'Ctrl-m',
      mac: 'Cmd-m',
      run: () => {
        bus.emit('insertMarkBlock');
        return true;
      },
    };

    // 4. Add a new shortcut key to the array
    const newMdEditorCommands = [...mdEditorCommands, CtrlM];

    newExtensions.push(keymap.of(newMdEditorCommands));

    return newExtensions;
  },
});
\`\`\`

Next, listening 'insertMarkBlock' in the component where the editor is located

\`index.vue\`

\`\`\`vue
<template>
  <MdEditor ref="mdEditorRef" v-model="text" />
</template>

<script setup lang="ts">
import { MdEditor } from 'md-editor-v3';
import type { ExposeParam } from 'md-editor-v3';
import { ref, onMounted } from 'vue';
// If you used EventBus
import bus from '@/utils/event-bus';

const text = ref<string>('## md-editor-v3\\n\\n');

const mdEditorRef = ref<ExposeParam>();

onMounted(() => {
  bus.on('insertMarkBlock', () => {
    mdEditorRef.value?.insert((selectedText) => {
      return {
        targetValue: \`==\${selectedText}==\`,
        select: true,
        deviationStart: 2,
        deviationEnd: -2,
      };
    });
  });
});
<\/script>
\`\`\`

Attach: Simple version of \`EventBus\`

\`\`\`ts
/* eslint-disable @typescript-eslint/ban-types */
class EventBus {
  private events: Map<string, Function[]>;

  constructor() {
    this.events = new Map();
  }

  on(eventName: string, fn: Function) {
    if (!eventName) {
      console.error('Get a wrong eventName');
      return false;
    }

    if (!(fn instanceof Function)) {
      console.error('Get a wrong callback');
      return false;
    }

    const fns = this.events.get(eventName) || [];
    fns.push(fn);
    this.events.set(eventName, fns);
  }

  emit(eventName: string, ...args: any[]) {
    this.events.get(eventName)?.forEach((fn) => {
      fn(args);
    });
  }
}

export default new EventBus();
\`\`\`

### üç¶ Change Theme

Themes are divided into editor theme(\`theme\`), article preview theme(\`previewTheme\`) and code theme(\`codeTheme\`).

#### üçß Editor Theme

Support \`light\` and \`dark\` default.

\`\`\`vue
<template>
  <MdEditor v-model="state.text" :theme="state.theme" />
</template>

<script setup>
import { reactive } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const state = reactive({
  text: '',
  theme: 'dark',
});
<\/script>
\`\`\`

#### üç° Preview Theme

There are 6 kinds of themes: \`default\`, \`github\`, \`vuepress\`, \`mk-cute\`, \`smart-blue\` and \`cyanosis\`. It is useful When you want to show your article directly. Modify \`previewTheme\`.

- Usage

  \`\`\`vue
  <template>
    <MdEditor v-model="state.text" :previewTheme="state.theme" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    theme: 'cyanosis',
  });
  <\/script>
  \`\`\`

- Custom

  1. Write \`css\` under the \`xxx-theme\` claa. \`xxx\` is the name of your theme, for more examples, refer to [markdown-theme](https://github.com/imzbf/markdown-theme).

  _xxx.css_

  \`\`\`css
  .xxx-theme code {
    color: red;
  }
  \`\`\`

  2. Import

  \`\`\`js
  import 'xxx.css';
  \`\`\`

  3. Set \`previewTheme\`

  \`\`\`vue
  <template>
    <MdEditor previewTheme="xxx" />
  </template>
  \`\`\`

#### üéÑ Code Theme

There are 8 kinds of themes: \`atom\`, \`a11y\`, \`github\`, \`gradient\`, \`kimbie\`, \`paraiso\`,\`qtcreator\` and \`stackoverflow\`, they are all from [highlight.js](https://highlightjs.org/).

- Usage

  \`\`\`vue
  <template>
    <MdEditor v-model="state.text" :codeTheme="state.theme" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    theme: 'atom',
  });
  <\/script>
  \`\`\`

- Custom

  1. Find or Write your favorite theme, then config them:

  \`\`\`js
  import { config } from 'md-editor-v3';

  config({
    editorExtensions: {
      highlight: {
        css: {
          xxxxx: {
            light:
              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',
            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',
          },
          yyyyy: {
            light:
              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',
            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',
          },
        },
      },
    },
  });
  \`\`\`

  If some keys in object \`css\` are same as Editor's, Editor's whill be replaced.

  2. Set \`codeTheme\`

  \`\`\`vue
  <template>
    <MdEditor codeTheme="xxxxx" />
  </template>
  \`\`\`

### üõ† Config Extensions

Extensions highlight, prettier, cropper, screenfull are import from \`cdn\`. When your project is running offline, replace urls of these extensions. Some Extensions support be injected in development environment.

Example for \`screenfull\`:

#### ‚ö∞Ô∏è Inject Directly

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import screenfull from 'screenfull';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorExtensions: {
    screenfull: {
      instance: screenfull,
    },
  },
});

const text = ref('');
<\/script>
\`\`\`

#### üì° Intranet Link

Get files from [unpkg.com](https://unpkg.com).

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorExtensions: {
    screenfull: {
      js: 'https://localhost:8090/screenfull@5.2.0/index.js',
    },
  },
});

const text = ref('');
<\/script>
\`\`\`

### üì∑ Upload Pictures

By default, you can select multiple pictures. You can paste and upload screenshots and copy web page pictures.

> Tips: When pasting pictures, if they are GIF graphs, it does not work! Please upload it by file system.

\`\`\`vue
<template>
  <MdEditor v-model="text" @onUploadImg="onUploadImg" />
</template>

<script setup>
import { ref } from 'vue';
import axios from 'axios';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('# Hello Editor');

const onUploadImg = async (files, callback) => {
  const res = await Promise.all(
    files.map((file) => {
      return new Promise((rev, rej) => {
        const form = new FormData();
        form.append('file', file);

        axios
          .post('/api/img/upload', form, {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          })
          .then((res) => rev(res))
          .catch((error) => rej(error));
      });
    })
  );

  callback(res.map((item) => item.data.url));
};
<\/script>
\`\`\`

### üè≥Ô∏è‚Äçüåà Extension Language

\`\`\`vue
<template>
  <MdEditor v-model="state.text" :language="state.language" />
</template>

<script setup>
import { reactive } from 'vue';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorConfig: {
    languageUserDefined: {
      'my-lang': {
        toolbarTips: {
          bold: 'bold',
          underline: 'underline',
          italic: 'italic',
          strikeThrough: 'strikeThrough',
          title: 'title',
          sub: 'subscript',
          sup: 'superscript',
          quote: 'quote',
          unorderedList: 'unordered list',
          orderedList: 'ordered list',
          task: 'task list',
          codeRow: 'inline code',
          code: 'block-level code',
          link: 'link',
          image: 'image',
          table: 'table',
          mermaid: 'mermaid',
          katex: 'formula',
          revoke: 'revoke',
          next: 'undo revoke',
          save: 'save',
          prettier: 'prettier',
          pageFullscreen: 'fullscreen in page',
          fullscreen: 'fullscreen',
          preview: 'preview',
          htmlPreview: 'html preview',
          catalog: 'catalog',
          github: 'source code',
        },
        titleItem: {
          h1: 'Lv1 Heading',
          h2: 'Lv2 Heading',
          h3: 'Lv3 Heading',
          h4: 'Lv4 Heading',
          h5: 'Lv5 Heading',
          h6: 'Lv6 Heading',
        },
        imgTitleItem: {
          link: 'Add Img Link',
          upload: 'Upload Img',
          clip2upload: 'Clip Upload',
        },
        linkModalTips: {
          linkTitle: 'Add Link',
          imageTitle: 'Add Image',
          descLabel: 'Desc:',
          descLabelPlaceHolder: 'Enter a description...',
          urlLabel: 'Link:',
          urlLabelPlaceHolder: 'Enter a link...',
          buttonOK: 'OK',
        },
        clipModalTips: {
          title: 'Crop Image',
          buttonUpload: 'Upload',
        },
        copyCode: {
          text: 'Copy',
          successTips: 'Copied!',
          failTips: 'Copy failed!',
        },
        mermaid: {
          flow: 'flow',
          sequence: 'sequence',
          gantt: 'gantt',
          class: 'class',
          state: 'state',
          pie: 'pie',
          relationship: 'relationship',
          journey: 'journey',
        },
        katex: {
          inline: 'inline',
          block: 'block',
        },
        footer: {
          markdownTotal: 'Word Count',
          scrollAuto: 'Scroll Auto',
        },
      },
    },
  },
});

const state = reactive({
  text: '',
  language: 'my-lang',
});
<\/script>
\`\`\`

You can install the existing language also: [md-editor-extension](https://github.com/imzbf/md-editor-extension). Refer to extension library for the usage and the way to contribute~

### üìÑ Get Catalogue

- Get

  \`\`\`vue
  <template>
    <MdEditor v-model="text" @onGetCatalog="onGetCatalog" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    catalogList: [],
  });

  const onGetCatalog = (list) => {
    state.catalogList = list;
  };
  <\/script>
  \`\`\`

- Display

  Use \`MdCatalog\`

  \`\`\`vue
  <template>
    <MdPreview :modelValue="state.text" :id="state.id" :theme="state.theme" />
    <MdCatalog
      :editorId="state.id"
      :scrollElement="scrollElement"
      :theme="state.theme"
    />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdPreview, MdCatalog } from 'md-editor-v3';
  import 'md-editor-v3/lib/preview.css';

  const state = reactive({
    theme: 'dark',
    text: '',
    id: 'my-editor',
  });

  const scrollElement = document.documentElement;
  <\/script>
  \`\`\`

### ü™ö Define Toolbar

> after v1.6.0, You can sort the toolbar as you like, split tools by \`'-'\`, the left and right toolbars are divided by \`'='\`!

\`\`\`vue
<template>
  <MdEditor v-model="text" :toolbars="toolbars" />
</template>

<script setup>
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const toolbars = ['italic', 'underline', '-', 'bold', '=', 'github'];
<\/script>
\`\`\`

### üí™ Customize Toolbar

There are examples of \`mark\` and \`emoji\`.

To get complete code, refer to [docs](https://github.com/imzbf/md-editor-v3/blob/docs/src/pages/Preview/index.vue).

![mark and Emoji extension](https://imzbf.github.io/md-editor-v3/imgs/mark_emoji.gif)

> Get more emojis, go to [https://getemoji.com/](https://getemoji.com/).

### üßô‚Äç‚ôÇÔ∏è Change Styles

\`\`\`less
.css-vars(@isDark) {
  --md-color: if(@isDark, #999, #222);
  --md-hover-color: if(@isDark, #bbb, #000);
  --md-bk-color: if(@isDark, #000, #fff);
  --md-bk-color-outstand: if(@isDark, #333, #f2f2f2);
  --md-bk-hover-color: if(@isDark, #1b1a1a, #f5f7fa);
  --md-border-color: if(@isDark, #2d2d2d, #e6e6e6);
  --md-border-hover-color: if(@isDark, #636262, #b9b9b9);
  --md-border-active-color: if(@isDark, #777, #999);
  --md-modal-mask: #00000073;
  --md-scrollbar-bg-color: if(@isDark, #0f0f0f, #e2e2e2);
  --md-scrollbar-thumb-color: if(@isDark, #2d2d2d, #0000004d);
  --md-scrollbar-thumb-hover-color: if(@isDark, #3a3a3a, #00000059);
  --md-scrollbar-thumb-active-color: if(@isDark, #3a3a3a, #00000061);
}

.md-editor {
  .css-vars(false);
}

.md-editor-dark {
  .css-vars(true);
}
\`\`\`

Change background color in dark mode:

\`\`\`css
.md-editor-dark {
  --md-bk-color: #333 !important;
}
\`\`\`

### üôçüèª‚Äç‚ôÇÔ∏è Import All Library

1. Install Dependencies

\`\`\`shell
yarn add screenfull katex cropperjs@1 mermaid highlight.js prettier
\`\`\`

!!! info
Currently \`cropperjs@2\` is being optimised, and there are no plans to switch to version 2.0.
!!!

2. Configure

!!! warning

We recommend configuring it at the project entry point, such as in \`main.js\` for projects created with Vite. Avoid calling \`config\` within components!

!!!

main.js

\`\`\`js
import { config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

import screenfull from 'screenfull';

import katex from 'katex';
import 'katex/dist/katex.min.css';

import Cropper from 'cropperjs';
import 'cropperjs/dist/cropper.css';

import mermaid from 'mermaid';

import highlight from 'highlight.js';
import 'highlight.js/styles/atom-one-dark.css';

// <3.0
import prettier from 'prettier';
import parserMarkdown from 'prettier/parser-markdown';
// >=3.0
import * as prettier from 'prettier';
import parserMarkdown from 'prettier/plugins/markdown';

config({
  editorExtensions: {
    prettier: {
      prettierInstance: prettier,
      parserMarkdownInstance: parserMarkdown,
    },
    highlight: {
      instance: highlight,
    },
    screenfull: {
      instance: screenfull,
    },
    katex: {
      instance: katex,
    },
    cropper: {
      instance: Cropper,
    },
    mermaid: {
      instance: mermaid,
    },
  },
});
\`\`\`

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('');
<\/script>
\`\`\`

> Tips: While import highlight styles by yourself, editor will not be able to change code styles.

### üîí Compile-time Prevention of XSS

Version 5.0 exports the built-in XSS plugin, which is no longer added by default. The exported XSS plugin includes additional tags and attributes on top of the default whitelist:

\`\`\`json::close
{
  "img": ["class"],
  // Task List
  "input": ["class", "disabled", "type", "checked"],
  // Embedded video codes such as YouTube, WeTV, and Bilibili
  "iframe": [
    "class",
    "width",
    "height",
    "src",
    "title",
    "border",
    "frameborder",
    "framespacing",
    "allow",
    "allowfullscreen"
  ]
}
\`\`\`

#### üîí Add XSS extension

\`\`\`js
import { config, XSSPlugin } from 'md-editor-v3';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'xss',
        plugin: XSSPlugin,
        options: {},
      },
    ];
  },
});
\`\`\`

#### üîè Modify XSS configuration

Add a configuration that allows for events where image loading fails

\`\`\`js
import { config, XSSPlugin } from 'md-editor-v3';
// import { getDefaultWhiteList } from 'xss';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'xss',
        plugin: XSSPlugin,
        options: {
          // Option 1: Extend All by Yourself
          // xss() {
          //   return {
          //     whiteList: Object.assign({}, getDefaultWhiteList(), {
          //       // If you need to use task list, please keep this configuration
          //       img: ['class'],
          //       input: ['class', 'disabled', 'type', 'checked'],
          //       // If you need to use embedded video code, please keep this configuration
          //       iframe: [
          //         'class',
          //         'width',
          //         'height',
          //         'src',
          //         'title',
          //         'border',
          //         'frameborder',
          //         'framespacing',
          //         'allow',
          //         'allowfullscreen'
          //       ],
          //       img: ['onerror']
          //     })
          //   };
          // }
          // Option 2: Add on Top of the Default Whitelist. ^4.15.6
          extendedWhiteList: {
            img: ['onerror'],
          },
        },
      },
    ];
  },
});
\`\`\`

More configuration references: [js-xss](https://github.com/leizongmin/js-xss/tree/master)

### üîí Prevent XSS after compilation

Using \`sanitize\` to sanitize \`html\`. eg: \`sanitize-html\`

\`\`\`shell
yarn add sanitize-html
\`\`\`

\`\`\`vue
<template>
  <MdEditor :sanitize="sanitize" />
</template>

<script setup>
import sanitizeHtml from 'sanitize-html';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const sanitize = (html) => {
  return sanitizeHtml(html);
};
<\/script>
\`\`\`

### üóÇ Folding Document Content

\`\`\`js
import { config } from 'md-editor-v3';
import { foldGutter } from '@codemirror/language';
import { lineNumbers } from '@codemirror/view';

config({
  codeMirrorExtensions(_theme, extensions) {
    return [...extensions, lineNumbers(), foldGutter()];
  },
});
\`\`\`

### üèÑüèª‚Äç‚ôÇÔ∏è Open Links In New Window

1. Install additional extensions

\`\`\`shell
yarn add markdown-it-link-attributes
\`\`\`

2. Add extensions to the compiler

\`\`\`js
import { config } from 'md-editor-v3';
import LinkAttr from 'markdown-it-link-attributes';
// import Anchor from 'markdown-it-anchor';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'linkAttr',
        plugin: LinkAttr,
        options: {
          matcher(href: string) {
            // If markdown-it-anchor is used.
            // Anchor links at the heading should be ignored.
            return !href.startsWith('#');
          },
          attrs: {
            target: '_blank',
          },
        },
      },
      // {
      //   type: 'anchor',
      //   plugin: Anchor,
      //   options: {
      //     permalink: Anchor.permalink.headerLink(),
      //     slugify(s: string) {
      //       return s;
      //     }
      //   }
      // }
    ];
  },
});
\`\`\`

### ‚òëÔ∏è Toggleable status task list

\`\`\`js
import { config } from 'md-editor-v3';
config({
  markdownItPlugins(plugins, { editorId }) {
    return plugins.map((item) => {
      if (item.type === 'taskList') {
        return {
          ...item,
          options: {
            ...item.options,
            enabled: true,
            // If you just want to enable this feature for a certain editor
            // enabled: editorId === 'myId'
          },
        };
      }
      return item;
    });
  },
});
\`\`\`

\`\`\`vue
<MdEditor id="myId" v-model="text" />
\`\`\`

### üé≥ co-working

Install [yjs](https://github.com/yjs/yjs)

\`\`\`shell
npm i yjs y-codemirror.next y-websocket
\`\`\`

Add the \`yjs\` extension in main.js:

\`\`\`js
import { config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

import * as Y from 'yjs';
import * as random from 'lib0/random';
import { yCollab } from 'y-codemirror.next';
import { WebsocketProvider } from 'y-websocket';

const usercolors = [
  { color: '#30bced', light: '#30bced33' },
  { color: '#6eeb83', light: '#6eeb8333' },
  { color: '#ffbc42', light: '#ffbc4233' },
  { color: '#ecd444', light: '#ecd44433' },
  { color: '#ee6352', light: '#ee635233' },
  { color: '#9ac2c9', light: '#9ac2c933' },
  { color: '#8acb88', light: '#8acb8833' },
  { color: '#1be7ff', light: '#1be7ff33' },
];

// select a random color for this user
const userColor = usercolors[random.uint32() % usercolors.length];

const ydoc = new Y.Doc();
const provider = new WebsocketProvider(
  // Start a websocket server quickly: https://github.com/yjs/y-websocket?tab=readme-ov-file#start-a-y-websocket-server
  'ws://127.0.0.1:1234',
  'md-editor-v3-room',
  ydoc
);
const ytext = ydoc.getText('module-name');

const undoManager = new Y.UndoManager(ytext);

provider.awareness.setLocalStateField('user', {
  name: 'Anonymous ' + Math.floor(Math.random() * 100),
  color: userColor.color,
  colorLight: userColor.light,
});

config({
  codeMirrorExtensions(_theme, extensions) {
    return [...extensions, yCollab(ytext, provider.awareness, { undoManager })];
  },
});
\`\`\`

If you want to use it in only one editor, try distinguishing using \`editorId\` (\`^4.20.0\`):

\`\`\`js
config({
  codeMirrorExtensions(_theme, extensions, _keyBindings, { editorId }) {
    return editorId === 'myId'
      ? [...extensions, yCollab(ytext, provider.awareness, { undoManager })]
      : extensions;
  },
});
\`\`\`

### üìù Extend code block tool

\`\`\`js
config({
  markdownItPlugins(plugins, { editorId }) {
    return plugins.map((item) => {
      switch (item.type) {
        case 'code': {
          return {
            ...item,
            options: {
              ...item.options,
              extraTools:
                '<span class="extra-code-tools">Additional features</span>',
            },
          };
        }

        default: {
          return item;
        }
      }
    });
  },
});
\`\`\`

It will be displayed after the 'Copy Code' button. By working together with the \`onRemount\` event, you can correctly retrieve these elements using \`querySelectorAll\` and bind event listeners to them.

Here is an example of how to print code:

\`\`\`js
const onRemount = () => {
  document
    .querySelectorAll(\`#\${editorId} .\${prefix}-preview .\${prefix}-code\`)
    .forEach((codeBlock: Element) => {
      const tools = codeBlock.querySelectorAll('.extra-code-tools');
      tools.forEach((item) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();

          const activeCode =
            codeBlock.querySelector('input:checked + pre code') ||
            codeBlock.querySelector('pre code');

          const codeText = activeCode?.textContent;

          console.log(codeText);
        });
      });
    });
};
\`\`\`

## üßª Edit This Page

[demo-en-US](https://github.com/imzbf/md-editor-v3/blob/dev-docs/public/demo-en-US.md)
`,d=`## üòÅ Âü∫Êú¨‰ΩøÁî®Á§∫‰æã

ÁõÆÂâç‰∏ÄÁõ¥Âú®Ëø≠‰ª£ÂºÄÂèëÔºåÊâÄ‰ª•Â∞ΩÈáèÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨„ÄÇÂèëÂ∏ÉÊó•ÂøóËØ∑ÂâçÂæÄÔºö[releases](https://github.com/imzbf/md-editor-v3/releases)

### ü§ñ NPM ÂÆâË£Ö

\`\`\`shell [install:npm]
npm install md-editor-v3
\`\`\`

\`\`\`shell [install:yarn]
yarn add md-editor-v3
\`\`\`

!!! warning

~~ÂΩì‰ΩøÁî®ÊúçÂä°Á´ØÊ∏≤ÊüìÊó∂ÔºåËØ∑Âä°ÂøÖËÆæÁΩÆ\`editorId\`‰∏∫Âõ∫ÂÆöÂÄº„ÄÇ~~

5.0 ÂºÄÂßãÔºåÊ≤°ÊúâËØ•ÈôêÂà∂‰∫Ü„ÄÇ

!!!

### ü§ì CDN ÈìæÊé•

ÈÄöËøáÁõ¥Êé•ÈìæÊé•Áîü‰∫ßÁâàÊú¨Êù•‰ΩøÁî®Ôºå‰∏ãÈù¢ÊòØ‰∏Ä‰∏™Â∞è‰æãÂ≠êÔºö

\`\`\`html
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <title>ÂÖ®Â±ÄÂºïÁî®</title>
    <link
      href="https://unpkg.com/md-editor-v3@\${EDITOR_VERSION}/lib/style.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="md-editor-v3">
      <md-editor-v3 v-model="text" />
    </div>
    <script src="https://unpkg.com/vue@3.5.12/dist/vue.global.prod.js"><\/script>
    <script src="https://unpkg.com/md-editor-v3@\${EDITOR_VERSION}/lib/umd/index.js"><\/script>
    <script>
      const App = {
        data() {
          return {
            text: 'Hello Editor!!',
          };
        },
      };
      Vue.createApp(App).use(MdEditorV3.MdEditor).mount('#md-editor-v3');
    <\/script>
  </body>
</html>
\`\`\`

#### ü•± Setup Ê®°Êùø

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('Hello Editor!');
<\/script>
\`\`\`

#### ü§ó Jsx Ê®°Êùø

\`\`\`js
import { defineComponent, ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

export default defineComponent({
  name: 'MdEditor',
  setup() {
    const text = ref('');
    const onChange = (v: string) => (text.value = v);

    return () => <MdEditor modelValue={text.value} onChange={onChange} />;
  },
});
\`\`\`

#### üìñ ‰ªÖÈ¢ÑËßà

\`\`\`vue
<template>
  <MdPreview :id="id" :modelValue="text" />
  <MdCatalog :editorId="id" :scrollElement="scrollElement" />
</template>

<script setup>
import { ref } from 'vue';
import { MdPreview, MdCatalog } from 'md-editor-v3';
// preview.cssÁõ∏ÊØîstyle.cssÂ∞ë‰∫ÜÁºñËæëÂô®ÈÇ£ÈÉ®ÂàÜÊ†∑Âºè
import 'md-editor-v3/lib/preview.css';

const id = 'preview-only';
const text = ref('# Hello Editor');
const scrollElement = document.documentElement;
<\/script>
\`\`\`

!!! warning

ÂΩì‰ΩøÁî®ÊúçÂä°Á´ØÊ∏≤ÊüìÊó∂Ôºå\`scrollElement\`Â∫îËØ•ÊòØÂ≠óÁ¨¶Á±ªÂûãÔºå‰æãÔºö\`html\`„ÄÅ\`body\`„ÄÅ\`#id\`„ÄÅ\`.class\`„ÄÇ

!!!

## üéõ Web Component ‰∏≠‰ΩøÁî®

ÂÆåÊï¥ÁöÑÁ§∫‰æãÂèÇËÄÉÊ∫êÁ†Å‰∏≠Êèê‰æõÁöÑ[Á§∫‰æãÈ°πÁõÆ](https://github.com/imzbf/md-editor-v3/tree/main/example/webComponent)

‰∏ãÈù¢ÊòØÊ≥®ÊÑè‰∫ãÈ°π

1. ÂÜÖÈÉ®ÁöÑÂõæÁâáÊîæÂ§ßÊü•ÁúãÊó†ÊïàÔºåÈúÄË¶ÅËá™Ë°åÂÆûÁé∞ÔºÅÔºÅÔºÅ
2. ‰∏çËÉΩÈªòËÆ§ÁöÑ‰ΩøÁî® CDN ÂºïÁî®‰æùËµñÂ∫ìÔºåÂèÇËÄÉ[[Ëá™Ë°åÂºïÂÖ•Êâ©Â±ïÂ∫ì]](https://imzbf.github.io/md-editor-v3/zh-CN/demo#%F0%9F%99%8D%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F%20%E8%87%AA%E8%A1%8C%E5%BC%95%E5%85%A5%E6%89%A9%E5%B1%95%E5%BA%93)ÔºÅÔºÅÔºÅ

## ü•Ç Êâ©Â±ïÂäüËÉΩ

ËøôÈáåÂåÖÂê´‰∫Ü‰∏Ä‰∫õÁºñËæëÂô®\`api\`ÁöÑ‰ΩøÁî®Á§∫ËåÉ

### ü•∂ Ëá™ÂÆö‰πâÂø´Êç∑ÈîÆ

- ÂÜÖÁΩÆÁöÑÂø´Êç∑ÈîÆÈÖçÁΩÆÁöÑÊ∫êÁ†ÅÔºö[commands.ts](https://github.com/imzbf/md-editor-v3/blob/develop/MdEditor/layouts/Content/codemirror/commands.ts)ÔºåÂÆÉ‰ª¨‰Ωú‰∏∫Êâ©Â±ïÈ°πË¢´Ê∑ªÂä†Âà∞‰∫Ü\`codemirror\`„ÄÇ

- ÊÉ≥Ë¶ÅÊõøÊç¢„ÄÅÂà†Èô§Âø´Êç∑ÈîÆÁöÑÂü∫Êú¨ÂéüÁêÜÊòØÊâæÂà∞ÂØπÂ∫îÁöÑÊâ©Â±ïÔºåÁÑ∂ÂêéÈÅçÂéÜËøô‰∏™Âø´Êç∑ÈîÆÈÖçÁΩÆÁöÑÊï∞ÁªÑÔºåÊâæÂà∞Âπ∂Â§ÑÁêÜÂÆÉ„ÄÇ

- ‰∫ãÂÆû‰∏äÔºå\`config\`‰∏≠\`codeMirrorExtensions\`ÁöÑÁ¨¨‰∫åÂÖ•ÂèÇ\`extensions\`ÊòØ‰∏Ä‰∏™Êï∞ÁªÑÔºåÂÆÉÁöÑÁ¨¨‰∏ÄÈ°πÂ∞±ÊòØÂø´Êç∑ÈîÆÊâ©Â±ïÔºåÁ¨¨‰∏âÂÖ•ÂèÇÂ∞±ÊòØÈªòËÆ§ÁöÑÂø´Êç∑ÈîÆÈÖçÁΩÆ„ÄÇ

#### üíÖ ‰øÆÊîπÂø´Êç∑ÈîÆ

Â∞Ü\`Ctrl-b\`‰øÆÊîπ‰∏∫\`Ctrl-m\`

\`\`\`js
import { config } from 'md-editor-v3';
import { keymap } from '@codemirror/view';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions, mdEditorCommands) {
    const newExtensions = [...extensions];
    // 1. ÂÖàÊääÈªòËÆ§ÁöÑÂø´Êç∑ÈîÆÊâ©Â±ïÁßªÈô§
    newExtensions.shift();

    // 2. ÂèÇËÄÉÂø´Êç∑ÈîÆÈÖçÁΩÆÁöÑÊ∫êÁ†ÅÔºåÊâæÂà∞CtrlBÁöÑÈÖçÁΩÆÈ°πÂú®mdEditorCommands‰∏≠ÁöÑ‰ΩçÁΩÆ
    const CtrlB = mdEditorCommands[0];

    // 3. ÈÖçÁΩÆcodemirrorÂø´Êç∑ÈîÆÁöÑÊñáÊ°£
    // https://codemirror.net/docs/ref/#commands
    const CtrlM = {
      // ËøôÈáåÊàë‰ª¨ÈúÄË¶ÅCtrlBÈªòËÆ§Ëß¶ÂèëÊâßË°åÁöÑrunÊñπÊ≥ïÔºåÂ¶ÇÊûúÊòØÊñ∞Â¢ûÂø´Êç∑ÈîÆÁ≠âÔºåÂ∞±ÈúÄË¶ÅËá™Ë°åÂ§ÑÁêÜËß¶ÂèëÈÄªËæë
      ...CtrlB,
      key: 'Ctrl-m',
      mac: 'Cmd-m',
    };

    // 4. Êää‰øÆÊîπÂêéÁöÑÂø´Êç∑ÈîÆÊîæÂà∞ÂæÖÊûÑÂª∫Êâ©Â±ïÁöÑÊï∞ÁªÑ‰∏≠
    const newMdEditorCommands = [
      CtrlM,
      ...mdEditorCommands.filter((i) => i.key !== 'Ctrl-b'),
    ];

    newExtensions.push(keymap.of(newMdEditorCommands));

    return newExtensions;
  },
});
\`\`\`

#### ‚úÇÔ∏è Âà†Èô§Âø´Êç∑ÈîÆ

Á¶ÅÁî®ÊâÄÊúâÂø´Êç∑ÈîÆ

\`\`\`js
import { config } from 'md-editor-v3';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions) {
    const newExtensions = [...extensions];
    // 1. ÊääÈªòËÆ§ÁöÑÂø´Êç∑ÈîÆÊâ©Â±ïÁßªÈô§
    newExtensions.shift();

    // 2. ËøîÂõûÊâ©Â±ïÂàóË°®Âç≥ÂèØ
    return newExtensions;
  },
});
\`\`\`

#### üíâ Êñ∞Â¢ûÂø´Êç∑ÈîÆ

Â¶ÇÊûúÊ∂âÂèäÂà∞ÂêëÁºñËæëÊ°ÜÊèíÂÖ•ÂÜÖÂÆπÔºåËøôÊòØÈúÄË¶ÅÂÄüÂä©ÁªÑ‰ª∂ÂÆû‰æã‰∏äÁªëÂÆöÁöÑ\`insert\`ÊñπÊ≥ïÔºåÂèÇËÄÉ[ÊâãÂä®ÂêëÊñáÊú¨Ê°ÜÊèíÂÖ•ÂÜÖÂÆπ](/md-editor-v3/zh-CN/docs#%F0%9F%92%89%20insert)„ÄÇ

Â¶ÇÊûú‰∏çÊòØÂú®ÁºñËæëÂô®ÊâÄÂú®ÁöÑÁªÑ‰ª∂‰∏≠‰ΩøÁî®\`config\`ÔºåËøôÊòØÊó†Ê≥ïÊãøÂà∞ÁºñËæëÂô®ÁªÑ‰ª∂ÂÆû‰æãÔºåËøôÊó∂Ôºå‰Ω†ÂèØËÉΩÈúÄË¶ÅÂÄüÂä©\`event-bus\`„ÄÇ

Á§∫‰æãÂÆûÁé∞\`Ctrl+m\`ÂêëÁºñËæëÊ°ÜÊèíÂÖ•Ê†áËÆ∞Ê®°Âùó(\`==mark==\`)

\`index.ts\`

\`\`\`js
import { config } from 'md-editor-v3';
import { keymap, KeyBinding } from '@codemirror/view';
// ÂÅáËÆæ‰Ω†‰ΩøÁî®‰∫ÜEventBus
import bus from '@/utils/event-bus';

config({
  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]
  codeMirrorExtensions(theme, extensions, mdEditorCommands) {
    const newExtensions = [...extensions];
    // 1. ÂÖàÊääÈªòËÆ§ÁöÑÂø´Êç∑ÈîÆÊâ©Â±ïÁßªÈô§
    newExtensions.shift();

    // 2. ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÂø´Êç∑ÈîÆÈÖçÁΩÆÔºåÂèÇËÄÉhttps://codemirror.net/docs/ref/#commands
    const CtrlM: KeyBinding = {
      key: 'Ctrl-m',
      mac: 'Cmd-m',
      run: () => {
        bus.emit('insertMarkBlock');
        return true;
      },
    };

    // 4. ÊääÊñ∞ÁöÑÂø´Êç∑ÈîÆÊ∑ªÂä†Âà∞Êï∞ÁªÑ‰∏≠
    const newMdEditorCommands = [...mdEditorCommands, CtrlM];

    newExtensions.push(keymap.of(newMdEditorCommands));

    return newExtensions;
  },
});
\`\`\`

Êé•‰∏ãÊù•Âú®ÁºñËæëÂô®ÊâÄÂú®ÁªÑ‰ª∂ÁõëÂê¨\`insertMarkBlock\`Ëøô‰∏™‰∫ã‰ª∂

\`index.vue\`

\`\`\`vue
<template>
  <MdEditor ref="mdEditorRef" v-model="text" />
</template>

<script setup lang="ts">
import { MdEditor } from 'md-editor-v3';
import type { ExposeParam } from 'md-editor-v3';
import { ref, onMounted } from 'vue';
// ÂÅáËÆæ‰Ω†‰ΩøÁî®‰∫ÜEventBus
import bus from '@/utils/event-bus';

const text = ref<string>('## md-editor-v3\\n\\n');

const mdEditorRef = ref<ExposeParam>();

onMounted(() => {
  bus.on('insertMarkBlock', () => {
    mdEditorRef.value?.insert((selectedText) => {
      return {
        targetValue: \`==\${selectedText}==\`,
        select: true,
        deviationStart: 2,
        deviationEnd: -2,
      };
    });
  });
});
<\/script>
\`\`\`

ÈôÑÔºö\`EventBus\`ÊúÄÁÆÄÂçïÂÆûÁé∞

\`\`\`ts
/* eslint-disable @typescript-eslint/ban-types */
class EventBus {
  private events: Map<string, Function[]>;

  constructor() {
    this.events = new Map();
  }

  on(eventName: string, fn: Function) {
    if (!eventName) {
      console.error('Êó†ÊïàÁöÑ‰∫ã‰ª∂ÂêçÁß∞');
      return false;
    }

    if (!(fn instanceof Function)) {
      console.error('Êó†ÊïàÁöÑÂõûË∞ÉÊñπÊ≥ï');
      return false;
    }

    const fns = this.events.get(eventName) || [];
    fns.push(fn);
    this.events.set(eventName, fns);
  }

  emit(eventName: string, ...args: any[]) {
    this.events.get(eventName)?.forEach((fn) => {
      fn(args);
    });
  }
}

export default new EventBus();
\`\`\`

### üç¶ ‰∏ªÈ¢òÂàáÊç¢

‰∏ªÈ¢òÂàÜ‰∏∫‰∫ÜÁºñËæëÂô®‰∏ªÈ¢òÔºà\`theme\`ÔºåÁß∞‰∏∫ÂÖ®Â±Ä‰∏ªÈ¢òÔºâ„ÄÅÈ¢ÑËßàÂÜÖÂÆπ‰∏ªÈ¢òÔºà\`previewTheme\`ÔºâÂíåÂùóÁ∫ß‰ª£Á†Å‰∏ªÈ¢òÔºà\`codeTheme\`ÔºâÔºå‰ªñ‰ª¨ÈÉΩÊîØÊåÅÂìçÂ∫îÂºèÊõ¥Êñ∞ÔºåËÄåÈùûÂè™ËÉΩÈ¢ÑËÆæ„ÄÇ

#### üçß ÁºñËæëÂô®‰∏ªÈ¢ò

ÊîØÊåÅÈªòËÆ§ÂíåÊöóÂ§úÊ®°Âºè‰∏§Áßç

\`\`\`vue
<template>
  <MdEditor v-model="state.text" :theme="state.theme" />
</template>

<script setup>
import { reactive } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const state = reactive({
  text: '',
  theme: 'dark',
});
<\/script>
\`\`\`

#### üç° È¢ÑËßà‰∏ªÈ¢ò

ÂÜÖÁΩÆ‰∫Ü\`default\`„ÄÅ\`github\`„ÄÅ\`vuepress\`„ÄÅ\`mk-cute\`„ÄÅ\`smart-blue\`„ÄÅ\`cyanosis\`6 Áßç‰∏ªÈ¢òÔºåÂú®‰∏Ä‰∫õÁõ¥Êé•È¢ÑËßàÊñáÊ°£ÂÜÖÂÆπÊó∂‰ΩøÁî®„ÄÇÂπ∂‰∏îÊîØÊåÅÂú®Á∫øÂàáÊç¢Ôºà‰øÆÊîπ\`previewTheme\`Âç≥ÂèØÔºâÂíåËá™Ë°åÊâ©Â±ï„ÄÇ

- ‰ΩøÁî®

  \`\`\`vue
  <template>
    <MdEditor v-model="state.text" :previewTheme="state.theme" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    theme: 'cyanosis',
  });
  <\/script>
  \`\`\`

- Ëá™ÂÆö‰πâ

  1. ÂÖà‰ª•\`xxx-theme\`‰∏∫Á±ªÂêçÔºåÂÆö‰πâ‰Ω†ÁöÑ‰∏ªÈ¢ò\`css\`Ôºåxxx ÊòØ‰∏ªÈ¢òÂêçÁß∞ÔºåÂÖ∑‰ΩìÁöÑÂÜÖÂÆπÂèÇËÄÉ[markdown-theme](https://github.com/imzbf/markdown-theme)

  _xxx.css_

  \`\`\`css
  .xxx-theme code {
    color: red;
  }
  \`\`\`

  2. ÂÖ®Â±ÄÂºïÂÖ•

  \`\`\`js
  import 'xxx.css';
  \`\`\`

  3. ËÆæÁΩÆ\`previewTheme\`‰∏∫ xxx

  \`\`\`vue
  <template>
    <MdEditor previewTheme="xxx" />
  </template>
  \`\`\`

#### üéÑ ‰ª£Á†Å‰∏ªÈ¢ò

ÂÜÖÁΩÆ‰∫Ü\`atom\`„ÄÅ\`a11y\`„ÄÅ\`github\`„ÄÅ\`gradient\`„ÄÅ\`kimbie\`„ÄÅ\`paraiso\`„ÄÅ\`qtcreator\`„ÄÅ\`stackoverflow\`‰ª£Á†Å‰∏ªÈ¢òÔºåÂùáÊù•Ëá≥[highlight.js](https://highlightjs.org/)

- ‰ΩøÁî®

  \`\`\`vue
  <template>
    <MdEditor v-model="state.text" :codeTheme="state.theme" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    theme: 'atom',
  });
  <\/script>
  \`\`\`

- Ëá™ÂÆö‰πâ

  1. ÊâæÂà∞‰Ω†ÂñúÊ¨¢ÁöÑ‰ª£Á†Å‰∏ªÈ¢òÔºåÊúÄÂ•ΩÊîØÊåÅÊöóÂ§úÊ®°Âºè

  \`\`\`js
  import { config } from 'md-editor-v3';

  config({
    editorExtensions: {
      highlight: {
        css: {
          xxxxx: {
            light:
              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',
            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',
          },
          yyyyy: {
            light:
              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',
            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',
          },
        },
      },
    },
  });
  \`\`\`

  ‰Ω†ÂèØ‰ª•ÈÄöËøáÂ∞Ü\`css\`ÁöÑ\`key\`ËÆæÁΩÆ‰∏∫ÂÜÖÁΩÆÂêçÁß∞Êù•Ë¶ÜÁõñÂÜÖÁΩÆÁöÑÈìæÊé•„ÄÇ

  2. ËÆæÁΩÆ\`codeTheme\`

  \`\`\`vue
  <template>
    <MdEditor codeTheme="xxxxx" />
  </template>
  \`\`\`

### üõ† Êâ©Â±ïÂ∫ìÊõøÊç¢

highlight„ÄÅprettier„ÄÅcropper„ÄÅscreenfull Âùá‰ΩøÁî®Â§ñÈìæÂºïÂÖ•ÔºåÂú®Êó†Â§ñÁΩëÁöÑÊó∂ÂÄôÔºåÈÉ®ÂàÜÂèØÂ∞ÜÈ°πÁõÆ‰∏≠Â∑≤ÂÆâË£ÖÁöÑ‰æùËµñ‰º†ÂÖ•Ôºå‰πüÂèØ‰ª•‰ΩøÁî®‰∏ãËΩΩÂ•ΩÁöÑÂºïÁî®„ÄÇ

\`screenfull\` ÁöÑ‰æãÂ≠êÔºö

#### ‚ö∞Ô∏è ÂÜÖÁΩÆÂÆû‰æã

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
// ÂºïÁî®screenfull
import screenfull from 'screenfull';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorExtensions: {
    screenfull: {
      instance: screenfull,
    },
  },
});

const text = ref('');
<\/script>
\`\`\`

#### üì° ÂÜÖÁΩëÈìæÊé•

ÂØπÂ∫îÁöÑ js Êñá‰ª∂ÂèØ‰ª•Âéª[unpkg.com](https://unpkg.com)ÔºåÁõ¥Êé•ÊâæÂà∞ÂØπÂ∫îÁöÑÊñá‰ª∂‰∏ãËΩΩÂç≥ÂèØ„ÄÇ

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorExtensions: {
    screenfull: {
      js: 'https://localhost:8090/screenfull@5.2.0/index.js',
    },
  },
});

const text = ref('');
<\/script>
\`\`\`

### üì∑ ÂõæÁâá‰∏ä‰º†

ÈªòËÆ§ÂèØ‰ª•ÈÄâÊã©Â§öÂº†ÂõæÁâáÔºåÊîØÊåÅÊà™ÂõæÁ≤òË¥¥Êùø‰∏ä‰º†ÂõæÁâáÔºåÊîØÊåÅÂ§çÂà∂ÁΩëÈ°µÂõæÁâáÁ≤òË¥¥‰∏ä‰º†„ÄÇ

> Ê≥®ÊÑèÔºöÁ≤òË¥¥Êùø‰∏ä‰º†Êó∂ÔºåÂ¶ÇÊûúÊòØÁΩëÈ°µ‰∏äÁöÑ gif ÂõæÔºåÊó†Ê≥ïÊ≠£Á°Æ‰∏ä‰º†‰∏∫ gif Ê†ºÂºèÔºÅËØ∑‰øùÂ≠òÊú¨Âú∞ÂêéÂÜçÊâãÂä®‰∏ä‰º†„ÄÇ

\`\`\`vue
<template>
  <MdEditor v-model="text" @onUploadImg="onUploadImg" />
</template>

<script setup>
import { ref } from 'vue';
import axios from 'axios';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('# Hello Editor');

const onUploadImg = async (files, callback) => {
  const res = await Promise.all(
    files.map((file) => {
      return new Promise((rev, rej) => {
        const form = new FormData();
        form.append('file', file);

        axios
          .post('/api/img/upload', form, {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          })
          .then((res) => rev(res))
          .catch((error) => rej(error));
      });
    })
  );

  callback(res.map((item) => item.data.url));
};
<\/script>
\`\`\`

### üè≥Ô∏è‚Äçüåà ËØ≠Ë®ÄÊâ©Â±ï‰∏éÊõøÊç¢

\`\`\`vue
<template>
  <MdEditor v-model="state.text" :language="state.language" />
</template>

<script setup>
import { reactive } from 'vue';
import { MdEditor, config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

config({
  editorConfig: {
    languageUserDefined: {
      'my-lang': {
        toolbarTips: {
          bold: 'Âä†Á≤ó',
          underline: '‰∏ãÂàíÁ∫ø',
          italic: 'Êñú‰Ωì',
          strikeThrough: 'Âà†Èô§Á∫ø',
          title: 'Ê†áÈ¢ò',
          sub: '‰∏ãÊ†á',
          sup: '‰∏äÊ†á',
          quote: 'ÂºïÁî®',
          unorderedList: 'Êó†Â∫èÂàóË°®',
          orderedList: 'ÊúâÂ∫èÂàóË°®',
          task: '‰ªªÂä°ÂàóË°®',
          codeRow: 'Ë°åÂÜÖ‰ª£Á†Å',
          code: 'ÂùóÁ∫ß‰ª£Á†Å',
          link: 'ÈìæÊé•',
          image: 'ÂõæÁâá',
          table: 'Ë°®Ê†º',
          mermaid: 'mermaidÂõæ',
          katex: 'katexÂÖ¨Âºè',
          revoke: 'ÂêéÈÄÄ',
          next: 'ÂâçËøõ',
          save: '‰øùÂ≠ò',
          prettier: 'ÁæéÂåñ',
          pageFullscreen: 'ÊµèËßàÂô®ÂÖ®Â±è',
          fullscreen: 'Â±èÂπïÂÖ®Â±è',
          preview: 'È¢ÑËßà',
          htmlPreview: 'html‰ª£Á†ÅÈ¢ÑËßà',
          catalog: 'ÁõÆÂΩï',
          github: 'Ê∫êÁ†ÅÂú∞ÂùÄ',
        },
        titleItem: {
          h1: '‰∏ÄÁ∫ßÊ†áÈ¢ò',
          h2: '‰∫åÁ∫ßÊ†áÈ¢ò',
          h3: '‰∏âÁ∫ßÊ†áÈ¢ò',
          h4: 'ÂõõÁ∫ßÊ†áÈ¢ò',
          h5: '‰∫îÁ∫ßÊ†áÈ¢ò',
          h6: 'ÂÖ≠Á∫ßÊ†áÈ¢ò',
        },
        imgTitleItem: {
          link: 'Ê∑ªÂä†ÈìæÊé•',
          upload: '‰∏ä‰º†ÂõæÁâá',
          clip2upload: 'Ë£ÅÂâ™‰∏ä‰º†',
        },
        linkModalTips: {
          linkTitle: 'Ê∑ªÂä†ÈìæÊé•',
          imageTitle: 'Ê∑ªÂä†ÂõæÁâá',
          descLabel: 'ÈìæÊé•ÊèèËø∞Ôºö',
          descLabelPlaceHolder: 'ËØ∑ËæìÂÖ•ÊèèËø∞...',
          urlLabel: 'ÈìæÊé•Âú∞ÂùÄÔºö',
          urlLabelPlaceHolder: 'ËØ∑ËæìÂÖ•ÈìæÊé•...',
          buttonOK: 'Á°ÆÂÆö',
        },
        clipModalTips: {
          title: 'Ë£ÅÂâ™ÂõæÁâá‰∏ä‰º†',
          buttonUpload: '‰∏ä‰º†',
        },
        copyCode: {
          text: 'Â§çÂà∂‰ª£Á†Å',
          successTips: 'Â∑≤Â§çÂà∂ÔºÅ',
          failTips: 'Â§çÂà∂Â§±Ë¥•ÔºÅ',
        },
        mermaid: {
          flow: 'ÊµÅÁ®ãÂõæ',
          sequence: 'Êó∂Â∫èÂõæ',
          gantt: 'ÁîòÁâπÂõæ',
          class: 'Á±ªÂõæ',
          state: 'Áä∂ÊÄÅÂõæ',
          pie: 'È•ºÂõæ',
          relationship: 'ÂÖ≥Á≥ªÂõæ',
          journey: 'ÊóÖÁ®ãÂõæ',
        },
        katex: {
          inline: 'Ë°åÂÜÖÂÖ¨Âºè',
          block: 'ÂùóÁ∫ßÂÖ¨Âºè',
        },
        footer: {
          markdownTotal: 'Â≠óÊï∞',
          scrollAuto: 'ÂêåÊ≠•ÊªöÂä®',
        },
      },
    },
  },
});

const state = reactive({
  text: '',
  // ÂÆö‰πâËØ≠Ë®ÄÂêçÁß∞
  language: 'my-lang',
});
<\/script>
\`\`\`

‰Ω†‰πüÂèØ‰ª•‰ΩøÁî®Áé∞ÊàêÁöÑÊâ©Â±ïËØ≠Ë®ÄÔºö[md-editor-extension](https://github.com/imzbf/md-editor-extension)„ÄÇ‰ΩøÁî®ÂèäË¥°ÁåÆÊñπÂºèËßÅÊâ©Â±ïÂ∫ìÊñáÊ°£~

### üìÑ ÁõÆÂΩïËé∑Âèñ‰∏éÂ±ïÁ§∫

- Ëé∑Âèñ

  \`\`\`vue
  <template>
    <MdEditor v-model="text" @onGetCatalog="onGetCatalog" />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdEditor } from 'md-editor-v3';
  import 'md-editor-v3/lib/style.css';

  const state = reactive({
    text: '',
    catalogList: [],
  });

  const onGetCatalog = (list) => {
    state.catalogList = list;
  };
  <\/script>
  \`\`\`

- Â±ïÁ§∫

  ‰ΩøÁî®ÂÜÖÁΩÆ\`MdCatalog\`ÁªÑ‰ª∂

  \`\`\`vue
  <template>
    <MdPreview :modelValue="state.text" :id="state.id" :theme="state.theme" />
    <MdCatalog
      :editorId="state.id"
      :scrollElement="scrollElement"
      :theme="state.theme"
    />
  </template>

  <script setup>
  import { reactive } from 'vue';
  import { MdPreview, MdCatalog } from 'md-editor-v3';
  import 'md-editor-v3/lib/preview.css';

  const state = reactive({
    theme: 'dark',
    text: 'Ê†áÈ¢ò',
    id: 'my-editor',
  });

  const scrollElement = document.documentElement;
  <\/script>
  \`\`\`

### ü™ö Ë∞ÉÊï¥Â∑•ÂÖ∑Ê†è

‰ªé\`v1.6.0\`ÂºÄÂßãÔºåÊîØÊåÅË∞ÉÊï¥Â∑•ÂÖ∑Ê†èÂÜÖÂÆπÈ°∫Â∫èÂíåÂàÜÂâ≤Á¨¶‰∫Ü„ÄÇ

\`\`\`vue
<template>
  <MdEditor v-model="text" :toolbars="toolbars" />
</template>

<script setup>
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const toolbars = ['italic', 'underline', '-', 'bold', '=', 'github'];
<\/script>
\`\`\`

### üí™ Ëá™ÂÆö‰πâÂ∑•ÂÖ∑Ê†è

ËøôÈáåÂåÖÂê´‰∫Ü\`mark\`Ê†áËÆ∞Êâ©Â±ïÊôÆÈÄöÂ∑•ÂÖ∑Ê†èÂíå\`emoji\`Êâ©Â±ï‰∏ãÊãâÂ∑•ÂÖ∑Ê†èÁöÑÁ±ªÂûã

ÂèØËøêË°åÊ∫êÁ†ÅÂèÇËÄÉÊú¨ÊñáÊ°£[docs](https://github.com/imzbf/md-editor-v3/blob/docs/src/pages/Preview/index.vue)„ÄÇ

![Ê†áËÆ∞ÂèäEmojiÈ¢ÑËßà](https://imzbf.github.io/md-editor-v3/imgs/mark_emoji.gif)

> Êõ¥Â§ö emojiÔºå[https://getemoji.com/](https://getemoji.com/)„ÄÇ

### üßô‚Äç‚ôÇÔ∏è Ë∞ÉÊï¥ÁºñËæëÂô®Ê†∑Âºè

2.x ‰ΩøÁî® css ÂèòÈáèÂÆö‰πâ‰∫ÜÂ§ßÈÉ®ÂàÜÂÜÖÂÆπÔºö

\`\`\`less
.css-vars(@isDark) {
  --md-color: if(@isDark, #999, #222);
  --md-hover-color: if(@isDark, #bbb, #000);
  --md-bk-color: if(@isDark, #000, #fff);
  --md-bk-color-outstand: if(@isDark, #333, #f2f2f2);
  --md-bk-hover-color: if(@isDark, #1b1a1a, #f5f7fa);
  --md-border-color: if(@isDark, #2d2d2d, #e6e6e6);
  --md-border-hover-color: if(@isDark, #636262, #b9b9b9);
  --md-border-active-color: if(@isDark, #777, #999);
  --md-modal-mask: #00000073;
  --md-scrollbar-bg-color: if(@isDark, #0f0f0f, #e2e2e2);
  --md-scrollbar-thumb-color: if(@isDark, #2d2d2d, #0000004d);
  --md-scrollbar-thumb-hover-color: if(@isDark, #3a3a3a, #00000059);
  --md-scrollbar-thumb-active-color: if(@isDark, #3a3a3a, #00000061);
}

.md-editor {
  .css-vars(false);
}

.md-editor-dark {
  .css-vars(true);
}
\`\`\`

Âè™ÈúÄË¶ÅË∞ÉÊï¥ÂØπÂ∫îÁöÑ css ÂèòÈáèÔºåÊØîÂ¶ÇË∞ÉÊï¥ÊöóÂ§úÊ®°Âºè‰∏ãÁöÑËÉåÊôØÔºö

\`\`\`css
.md-editor-dark {
  --md-bk-color: #333 !important;
}
\`\`\`

### üôçüèª‚Äç‚ôÇÔ∏è Ëá™Ë°åÂºïÂÖ•Êâ©Â±ïÂ∫ì

ËøôÈáåÁªôÂá∫‰∏Ä‰∏™ÂÆåÂÖ®‰∏ç‰ΩøÁî®Â§ñÈÉ®ÈìæÊé•ÔºåÂÖ®ÈÉ®Ëá™Ë°åÂºïÂÖ•ÁöÑÁ§∫‰æãÔºö

1. ÂÆâË£Ö‰æùËµñ

\`\`\`shell
yarn add screenfull katex cropperjs@1 mermaid highlight.js prettier
\`\`\`

!!! info
ÁõÆÂâç\`cropperjs@2\`Ê≠£Âú®‰ºòÂåñ‰∏≠ÔºåÊöÇÊú™ËÆ°ÂàíÂàáÊç¢Âà∞ 2.0 ÁâàÊú¨„ÄÇ
!!!

2. ÈÖçÁΩÆÂà∞ÁºñËæëÂô®

!!! warning

Êàë‰ª¨Âª∫ËÆÆ‰Ω†Âú®È°πÁõÆÂÖ•Âè£ÈÖçÁΩÆÔºå‰æãÂ¶Ç vite ÂàõÂª∫ÁöÑÈ°πÁõÆ‰∏≠ÁöÑ main.js„ÄÇ‰∏çË¶ÅÂú®ÁªÑ‰ª∂‰∏≠ÂéªË∞ÉÁî® \`config\` ÔºÅ

!!!

main.js

\`\`\`js
import { config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

import screenfull from 'screenfull';

import katex from 'katex';
import 'katex/dist/katex.min.css';

import Cropper from 'cropperjs';
import 'cropperjs/dist/cropper.css';

import mermaid from 'mermaid';

import highlight from 'highlight.js';
import 'highlight.js/styles/atom-one-dark.css';

// <3.0
// import prettier from 'prettier';
// import parserMarkdown from 'prettier/parser-markdown';
// >=3.0
import * as prettier from 'prettier';
import parserMarkdown from 'prettier/plugins/markdown';

config({
  editorExtensions: {
    prettier: {
      prettierInstance: prettier,
      parserMarkdownInstance: parserMarkdown,
    },
    highlight: {
      instance: highlight,
    },
    screenfull: {
      instance: screenfull,
    },
    katex: {
      instance: katex,
    },
    cropper: {
      instance: Cropper,
    },
    mermaid: {
      instance: mermaid,
    },
  },
});
\`\`\`

App.vue

\`\`\`vue
<template>
  <MdEditor v-model="text" />
</template>

<script setup>
import { ref } from 'vue';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const text = ref('');
<\/script>
\`\`\`

> Ê≥®ÊÑèÔºöhighlight ÁöÑÊ†∑ÂºèËá™Ë°åÂºïÂÖ•ÂêéÔºåÂ∞Ü‰∏çÊîØÊåÅÂàáÊç¢‰ª£Á†ÅÊ†∑Âºè„ÄÇ

### üîí ÁºñËØëÊó∂Èò≤ËåÉ XSS

5.0 ÁâàÊú¨Â∞ÜÂÜÖÁΩÆÁöÑ XSS Êâ©Â±ïÂØºÂá∫‰∫ÜÔºå‰∏çÂÜçÈªòËÆ§Ê∑ªÂä†Ôºå ÂØºÂá∫ÁöÑ XSS Êâ©Â±ïÂú®ÈªòËÆ§ÁôΩÂêçÂçïÁöÑÂü∫Á°Ä‰∏äÔºåÂ¢ûÂä†‰∫ÜÈÉ®ÂàÜÊ†áÁ≠æÂíåÂ±ûÊÄßÔºö

\`\`\`json::close
{
  "img": ["class"],
  // ÊîØÊåÅ‰ªªÂä°ÂàóË°®
  "input": ["class", "disabled", "type", "checked"],
  // ‰∏ªË¶ÅÊîØÊåÅyoutobe„ÄÅËÖæËÆØËßÜÈ¢ë„ÄÅÂìîÂì©ÂìîÂì©Á≠âÂÜÖÂµåËßÜÈ¢ë‰ª£Á†Å
  "iframe": [
    "class",
    "width",
    "height",
    "src",
    "title",
    "border",
    "frameborder",
    "framespacing",
    "allow",
    "allowfullscreen"
  ]
}
\`\`\`

#### üîí Ê∑ªÂä† xss Êâ©Â±ï

\`\`\`js
import { config, XSSPlugin } from 'md-editor-v3';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'xss',
        plugin: XSSPlugin,
        options: {},
      },
    ];
  },
});
\`\`\`

#### üîè ‰øÆÊîπ xss ÈÖçÁΩÆ

Êàë‰ª¨Ê∑ªÂä†‰∏Ä‰∏™ÂÖÅËÆ∏ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•ÁöÑ‰∫ã‰ª∂

\`\`\`js
import { config, XSSPlugin } from 'md-editor-v3';
// import { getDefaultWhiteList } from 'xss';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'xss',
        plugin: XSSPlugin,
        options: {
          // ÊñπÂºè‰∏ÄÔºöËá™Ë°åÊâ©Â±ïÂÖ®ÈÉ®
          // xss() {
          //   return {
          //     whiteList: Object.assign({}, getDefaultWhiteList(), {
          //       // Â¶ÇÊûú‰Ω†ÈúÄË¶Å‰ΩøÁî®‰ªªÂä°ÂàóË°®ÔºåËØ∑‰øùÁïôËøôÈ°πÈÖçÁΩÆ
          //       img: ['class'],
          //       input: ['class', 'disabled', 'type', 'checked'],
          //       // Â¶ÇÊûú‰Ω†ÈúÄË¶Å‰ΩøÁî®ÂµåÂÖ•ËßÜÈ¢ë‰ª£Á†ÅÔºåËØ∑‰øùÁïôËøôÈ°πÈÖçÁΩÆ
          //       iframe: [
          //         'class',
          //         'width',
          //         'height',
          //         'src',
          //         'title',
          //         'border',
          //         'frameborder',
          //         'framespacing',
          //         'allow',
          //         'allowfullscreen'
          //       ],
          //       img: ['onerror']
          //     })
          //   };
          // },
          // ÊñπÂºè‰∫åÔºöÂú®ÈªòËÆ§ÁôΩÂêçÂçïÁöÑÂü∫Á°Ä‰∏äÊñ∞Â¢û„ÄÇ^4.15.6
          extendedWhiteList: {
            img: ['onerror'],
          },
        },
      },
    ];
  },
});
\`\`\`

Êõ¥Êñ∞ËØ¶ÁªÜÈÖçÁΩÆÂèÇËÄÉ [js-xss](https://github.com/leizongmin/js-xss/blob/master/README.zh.md)

### üîí ÁºñËØëÂêéÈò≤ËåÉ XSS

ÈÄöËøá\`sanitize\`Â±ûÊÄßÔºåËá™Ë°åÂ§ÑÁêÜ‰∏çÂÆâÂÖ®ÁöÑ html ÂÜÖÂÆπ„ÄÇ‰æãÂ¶ÇÔºö‰ΩøÁî®\`sanitize-html\`Â§ÑÁêÜ

\`\`\`shell
yarn add sanitize-html
\`\`\`

\`\`\`vue
<template>
  <MdEditor :sanitize="sanitize" />
</template>

<script setup>
import sanitizeHtml from 'sanitize-html';
import { MdEditor } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

const sanitize = (html) => {
  return sanitizeHtml(html);
};
<\/script>
\`\`\`

Êõ¥ËØ¶ÁªÜÁöÑÂÆûÁé∞ÂèØ‰ª•ÂèÇËÄÉÊú¨ÊñáÊ°£ÁöÑÊ∫êÁ†ÅÔºÅ

### üóÇ ÊäòÂè†ÊñáÊ°£ÂÜÖÂÆπ

\`\`\`js
import { config } from 'md-editor-v3';
import { foldGutter } from '@codemirror/language';
import { lineNumbers } from '@codemirror/view';

config({
  codeMirrorExtensions(_theme, extensions) {
    return [...extensions, lineNumbers(), foldGutter()];
  },
});
\`\`\`

### üèÑüèª‚Äç‚ôÇÔ∏è Êñ∞Á™óÂè£ÊâìÂºÄÈìæÊé•

1. ÂÆâË£ÖÈ¢ùÂ§ñÁöÑÊâ©Â±ï

\`\`\`shell
yarn add markdown-it-link-attributes
\`\`\`

2. Â∞ÜÊâ©Â±ïÊ∑ªÂä†Âà∞ÁºñËØëÂô®‰∏≠

\`\`\`js
import { config } from 'md-editor-v3';
import LinkAttr from 'markdown-it-link-attributes';
// import Anchor from 'markdown-it-anchor';

config({
  markdownItPlugins(plugins) {
    return [
      ...plugins,
      {
        type: 'linkAttr',
        plugin: LinkAttr,
        options: {
          matcher(href: string) {
            // Â¶ÇÊûú‰ΩøÁî®‰∫Ümarkdown-it-anchor
            // Â∫îËØ•ÂøΩÁï•Ê†áÈ¢òÂ§¥ÈÉ®ÁöÑÈîöÁÇπÈìæÊé•
            return !href.startsWith('#');
          },
          attrs: {
            target: '_blank',
          },
        },
      },
      // {
      //   type: 'anchor',
      //   plugin: Anchor,
      //   options: {
      //     permalink: Anchor.permalink.headerLink(),
      //     slugify(s: string) {
      //       return s;
      //     }
      //   }
      // }
    ];
  },
});
\`\`\`

### ‚òëÔ∏è ÂèØÂàáÊç¢Áä∂ÊÄÅÁöÑ‰ªªÂä°ÂàóË°®

\`\`\`js
import { config } from 'md-editor-v3';
config({
  markdownItPlugins(plugins, { editorId }) {
    return plugins.map((item) => {
      if (item.type === 'taskList') {
        return {
          ...item,
          options: {
            ...item.options,
            enabled: true,
            // Â¶ÇÊûúÂè™ÊòØÊÉ≥ÂØπÊüê‰∏™ÁºñËæëÂô®ÂºÄÂêØËøô‰∏™ÂäüËÉΩ
            // enabled: editorId === 'myId'
          },
        };
      }
      return item;
    });
  },
});
\`\`\`

\`\`\`vue
<MdEditor id="myId" v-model="text" />
\`\`\`

### üé≥ ÂçèÂêåÂäûÂÖ¨

ÂÆâË£Ö[yjs](https://github.com/yjs/yjs)ÂèäÁõ∏ÂÖ≥Â∫ì

\`\`\`shell
npm i yjs y-codemirror.next y-websocket
\`\`\`

Âú® main.js ‰∏≠Ê∑ªÂä† yjs Êâ©Â±ïÔºö

\`\`\`js
import { config } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

import * as Y from 'yjs';
import * as random from 'lib0/random';
import { yCollab } from 'y-codemirror.next';
import { WebsocketProvider } from 'y-websocket';

const usercolors = [
  { color: '#30bced', light: '#30bced33' },
  { color: '#6eeb83', light: '#6eeb8333' },
  { color: '#ffbc42', light: '#ffbc4233' },
  { color: '#ecd444', light: '#ecd44433' },
  { color: '#ee6352', light: '#ee635233' },
  { color: '#9ac2c9', light: '#9ac2c933' },
  { color: '#8acb88', light: '#8acb8833' },
  { color: '#1be7ff', light: '#1be7ff33' },
];

// select a random color for this user
const userColor = usercolors[random.uint32() % usercolors.length];

const ydoc = new Y.Doc();
const provider = new WebsocketProvider(
  // Start a websocket server quickly: https://github.com/yjs/y-websocket?tab=readme-ov-file#start-a-y-websocket-server
  'ws://127.0.0.1:1234',
  'md-editor-v3-room',
  ydoc
);
const ytext = ydoc.getText('module-name');

const undoManager = new Y.UndoManager(ytext);

provider.awareness.setLocalStateField('user', {
  name: 'Anonymous ' + Math.floor(Math.random() * 100),
  color: userColor.color,
  colorLight: userColor.light,
});

config({
  codeMirrorExtensions(_theme, extensions) {
    return [...extensions, yCollab(ytext, provider.awareness, { undoManager })];
  },
});
\`\`\`

Â¶ÇÊûúÂè™ÊÉ≥Âú®Êüê‰∏Ä‰∏™ÁºñËæëÂô®‰∏≠‰ΩøÁî®ÔºåÂ∞ùËØïÈÄöËøá\`editorId\`ËøõË°åÂå∫Âà´(\`^4.20.0\`)Ôºö

\`\`\`js
config({
  codeMirrorExtensions(_theme, extensions, _keyBindings, { editorId }) {
    return editorId === 'myId'
      ? [...extensions, yCollab(ytext, provider.awareness, { undoManager })]
      : extensions;
  },
});
\`\`\`

### üìù Êâ©Â±ï‰ª£Á†ÅÂùóÂ∑•ÂÖ∑

\`\`\`js
config({
  markdownItPlugins(plugins, { editorId }) {
    return plugins.map((item) => {
      switch (item.type) {
        case 'code': {
          return {
            ...item,
            options: {
              ...item.options,
              extraTools: '<span class="extra-code-tools">È¢ùÂ§ñÁöÑÂäüËÉΩ</span>',
            },
          };
        }

        default: {
          return item;
        }
      }
    });
  },
});
\`\`\`

ÂÆÉ‰ºöË¢´ÊòæÁ§∫Âú®Â§çÂà∂‰ª£Á†ÅÊåâÈíÆÂêéÈù¢ÔºåÈÖçÂêà\`onRemount\`‰∫ã‰ª∂Ôºå‰Ω†ËÉΩÂ§üÊ≠£Á°ÆÁöÑÈÄöËøá\`querySelectorAll\`Ëé∑ÂèñÂà∞ÂÆÉ‰ª¨Âπ∂ÁªëÂÆöÁõëÂê¨‰∫ã‰ª∂„ÄÇ

‰∏ãÈù¢ÊòØ‰∏Ä‰∏™ÊâìÂç∞‰ª£Á†ÅÁöÑÁ§∫‰æãÔºö

\`\`\`js
const onRemount = () => {
  document
    .querySelectorAll(\`#\${editorId} .\${prefix}-preview .\${prefix}-code\`)
    .forEach((codeBlock: Element) => {
      const tools = codeBlock.querySelectorAll('.extra-code-tools');
      tools.forEach((item) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();

          const activeCode =
            codeBlock.querySelector('input:checked + pre code') ||
            codeBlock.querySelector('pre code');

          const codeText = activeCode?.textContent;

          console.log(codeText);
        });
      });
    });
};
\`\`\`

## üßª ÁºñËæëÊ≠§È°µÈù¢

[demo-zh-CN](https://github.com/imzbf/md-editor-v3/blob/dev-docs/public/demo-zh-CN.md)
`,M={class:"container"},C={class:"doc"},j={name:"DemoPage"},U=m({...j,setup(I){const n=a(),e="demo-preview",t=l(i(n.lang==="en-US"?s:d,{EDITOR_VERSION:r.dependencies["md-editor-v3"].replace("^","")}));return c(()=>n.lang,()=>{t.value=i(n.lang==="en-US"?s:d,{EDITOR_VERSION:r.dependencies["md-editor-v3"].replace("^","")})}),w({title:n.lang==="en-US"?`Example - ${g}`:`Á§∫‰æã - ${v}`,meta:[{name:"keywords",content:n.lang==="en-US"?p:u},{name:"description",content:n.lang==="en-US"?f:h}]}),(T,D)=>(k(),x("div",M,[b("div",C,[o(E,{editorId:e,modelValue:t.value},null,8,["modelValue"]),o(y,{editorId:e})])]))}});export{U as default};
